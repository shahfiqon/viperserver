package viper.server.core

import akka.actor.ActorRef
import viper.server.ViperConfig
import viper.server.core.ViperBackendConfigs._
import viper.server.vsi.{Envelope, ProcessManagement, JobID}
import viper.silver.ast
import viper.silver.logger.ViperLogger
import viper.silver.reporter.Message

import scala.language.postfixOps

class ViperCoreServer(private var _config: ViperConfig) extends ProcessManagement {

  // --- VCS : Configuration ---

  final def config: ViperConfig = _config

  protected var _logger: ViperLogger = _
  final def logger: ViperLogger = _logger

  /** Configures an instance of ViperCoreServer.
    *
    * This function should be called before any other.
    * */
  def start(): Unit = {
    config.verify()

    _logger = ViperLogger("ViperServerLogger", config.getLogFileWithGuarantee, config.logLevel())
    println(s"Writing [level:${config.logLevel()}] logs into ${if (!config.logFile.isSupplied) "(default) " else ""}journal: ${logger.file.get}")

    ViperCache.initialize(logger.get, config.backendSpecificCache())

    println(s"ViperServer online in CoreServer mode")
    super.start(config.maximumActiveJobs())
  }

  /** Verifies a Viper AST using the specified backend.
    * */
  def verify(programID: String, backend_config: ViperBackendConfig, program: ast.Program): JobID = {
    val args: List[String] = backend_config match {
      case _ : SiliconConfig => "silicon" :: backend_config.partialCommandLine
      case _ : CarbonConfig => "carbon" :: backend_config.partialCommandLine
      case _ : CustomConfig => "DummyFrontend" :: backend_config.partialCommandLine
    }
    val task_backend = new VerificationWorker(_config, logger.get, args :+ programID, program)
    initializeVerificationProcess(task_backend)
  }

  /** Stops an instance of ViperCoreServer from running.
    *
    * As such it should be the ultimate method called. Calling any other function after 'stop()' will result in an
    * IllegalStateException.
    * */
  override def stop(): Unit = {
    super.stop()
    println(s"Stopping ViperCoreServer")
  }

  def flushCache(): Unit = {
    if(!isRunning) {
      throw new IllegalStateException("Instance of ViperCoreServer already stopped")
    }
    ViperCache.resetCache()
    println(s"The cache has been flushed successfully.")
  }

  /** Stream all messages generated by the backend to some actor.

    * Deletes the jobhandle on completion.
    */
  def streamMessages(jid: JobID, clientActor: ActorRef): Unit = {
    terminateVerificationProcess(jid, clientActor)
  }

  override type A = Message

  override def unpack(e: Envelope): A = {
    e match {
      case SEnvelope(m) => m
    }
  }
}

